{"version":3,"sources":["components/AdviceButton.js","components/AdviceCard.js","components/AdviceMachine.js","App.js","serviceWorker.js","index.js"],"names":["AdviceButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","alert","state","react_default","a","createElement","className","onClick","role","Component","AdviceCard","src","imageSource","alt","viewBox","d","stroke","fill","strokeWidth","text","AdviceMachine","currentAdvice","bind","assertThisInitialized","_this2","fetch","then","response","json","responseJson","setState","slip","advice","console","log","catch","error","_this3","components_AdviceCard","components_AdviceButton","App","components_AdviceMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9f833c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/AdviceButton.scss\";\r\n\r\nclass AdviceButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  handleClick = () => {\r\n    alert(\"Fucking button worked!\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Advice-button\">\r\n        <a onClick={this.props.onClick}>\r\n          Get Advice! <span role=\"img\"> ðŸ”¥</span>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdviceButton;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/AdviceCard.scss\";\r\n\r\nclass AdviceCard extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"Advice-card\">\r\n        <div className=\"container\">\r\n          <div className=\"card\">\r\n            <div className=\"card__image-container\">\r\n              <img\r\n                className=\"card__image\"\r\n                src={this.props.imageSource}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n\r\n            <svg className=\"card__svg\" viewBox=\"0 0 800 500\">\r\n              <path\r\n                d=\"M 0 100 Q 50 200 100 250 Q 250 400 350 300 C 400 250 550 150 650 300 Q 750 450 800 400 L 800 500 L 0 500\"\r\n                stroke=\"transparent\"\r\n                fill=\"black\"\r\n              />\r\n              <path\r\n                className=\"card__line\"\r\n                d=\"M 0 100 Q 50 200 100 250 Q 250 400 350 300 C 400 250 550 150 650 300 Q 750 450 800 400\"\r\n                stroke=\"pink\"\r\n                strokeWidth=\"3\"\r\n                fill=\"transparent\"\r\n              />\r\n            </svg>\r\n\r\n            <div className=\"card__content\">\r\n              <p className=\"card__text\">{this.props.text}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdviceCard;\r\n","import React, { Component } from \"react\";\r\nimport AdviceButton from \"./AdviceButton\";\r\nimport AdviceCard from \"./AdviceCard\";\r\n\r\nclass AdviceMachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentAdvice: \"\",\r\n      imageSource: \"https://picsum.photos/400/320\"\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"https://api.adviceslip.com/advice\";\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ currentAdvice: responseJson.slip.advice });\r\n        console.log(this.state.currentAdvice);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  handleClick() {\r\n    //Fetching advice from Advice Slip\r\n    const url = \"https://api.adviceslip.com/advice\";\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({\r\n          currentAdvice: responseJson.slip.advice\r\n        });\r\n        console.log(this.state.currentAdvice);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    // Fetching new image for background in card from Unsplash\r\n    // const imgUrl = \"https://picsum.photos/400/320\";\r\n    // fetch(imgUrl)\r\n    //   .then(response => response.json())\r\n    //   .then(responseJson => {\r\n    //     this.setState({\r\n    //       imageSource: responseJson.data\r\n    //     });\r\n    //   });\r\n    // console.log(this.state.imageSource);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Advice-machine\">\r\n        <AdviceCard\r\n          text={this.state.currentAdvice}\r\n          imageSource={this.state.imageSource}\r\n        />\r\n        <AdviceButton onClick={this.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdviceMachine;\r\n","import React, { Component } from \"react\";\nimport \"./styles/App.css\";\nimport AdviceMachine from \"./components/AdviceMachine\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AdviceMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}